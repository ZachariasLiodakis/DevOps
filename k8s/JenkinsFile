pipeline {
  agent any

  environment {
    ANSIBLE_HOST_KEY_CHECKING = 'False'
  }

  stages {
    stage('Install prerequisites if needed') {
      steps {
        sh '''
          set -e
          echo "🔍 Checking prerequisites..."
          if ! command -v snap > /dev/null; then
            sudo apt update
            sudo apt install -y snapd
          fi
          if ! snap list microk8s > /dev/null 2>&1; then
            sudo snap install microk8s --classic
          fi
          if ! command -v ansible-playbook > /dev/null; then
            sudo apt update
            sudo apt install -y ansible
          fi
          if ! command -v kubectl > /dev/null; then
            sudo snap install kubectl --classic
          fi
          echo "✅ Prerequisites OK"
        '''
      }
    }

    stage('Checkout') {
      steps {
        git(
          url: 'https://github.com/ZachariasLiodakis/DevOps',
          branch: 'main'
        )
      }
    }

    stage('Setup Remote Vm if not Configured'){
      steps{
        withCredentials([
          string(credentialsId: 'k8s_vm_ip_creds', variable: 'K8S_VM_IP'),
          string(credentialsId: 'jenkins_user', variable: 'JENKINS_USER'),
          string(credentialsId: 'jenkins_token', variable: 'JENKINS_TOKEN'),
          string(credentialsId: 'jenkins_ip', variable: 'JENKINS_IP')
        ]) {
          withEnv([
            "MICROK8S_IP=$K8S_VM_IP",
            "JENKINS_USER=$JENKINS_USER",
            "JENKINS_TOKEN=$JENKINS_TOKEN",
            "JENKINS_IP=$JENKINS_IP"
          ]) {
            sh '''
              ansible-playbook -i ansible/hosts.yaml ansible/playbooks/setup-vm.yaml \
                -e microk8s_ip=$MICROK8S_IP \
                -e jenkins_user=$JENKINS_USER \
                -e jenkins_token=$JENKINS_TOKEN \
                -e jenkins_ip=$JENKINS_IP \
            '''
          }
        }
      }
    }

    stage('Deploy to K8s via Ansible') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig-creds', variable: 'KUBECONFIG_FILE'), 
        string(credentialsId: 'k8s_vm_ip_creds', variable: 'K8S_VM_IP')
        ]) {
          sh '''
            export KUBECONFIG=$KUBECONFIG_FILE
            ansible-playbook ansible/playbooks/deploy-k8s.yaml -e "microk8s_ip=$K8S_VM_IP"
          '''
        }
      }
    }
  }
}
