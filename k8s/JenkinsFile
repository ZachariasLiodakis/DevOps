pipeline {
  agent any

  environment {
    ANSIBLE_HOST_KEY_CHECKING = 'False'
    KUBE_CONFIG = credentials('kubeconfig-creds')
    K8S_VM_IP = credentials('k8s_vm_ip')
    WORKSPACE = "${env.WORKSPACE}"
  }

  stages {
    stage('Install prerequisites if needed') {
      steps {
        sh '''
          set -e

          echo "🔍 Checking for snap..."
          if ! command -v snap > /dev/null; then
            echo "➡ snap not found, installing snapd..."
            sudo apt update
            sudo apt install -y snapd
          else
            echo "✅ snap already installed"
          fi

          echo "🔍 Checking for microk8s..."
          if ! snap list microk8s > /dev/null 2>&1; then
            echo "➡ microk8s not found, installing microk8s..."
            sudo snap install microk8s --classic
          else
            echo "✅ microk8s already installed"
          fi

          # Πρώτο setup αν δεν έχει ξαναγίνει
          if [ ! -f /var/tmp/microk8s-setup-done ]; then
            echo "➡ First-time MicroK8s setup"
    
            sudo ufw allow in on eth0
            sudo ufw allow out on eth0
            sudo ufw default allow routed
    
            sudo usermod -a -G microk8s $USER
    
            mkdir -p ~/.kube
            sudo chown -R $USER ~/.kube
    
            echo "alias k='microk8s.kubectl'" >> ~/.profile
            echo "alias c=clear" >> ~/.profile
    
            # reload groups (προαιρετικά)
            newgrp microk8s
    
            microk8s enable dns ingress storage

            touch /var/tmp/microk8s-setup-done
          else
            echo "✅ MicroK8s first-time setup already done, skipping"
          fi

          echo "🔍 Checking for ansible-playbook..."
          if ! command -v ansible-playbook > /dev/null; then
            echo "➡ ansible-playbook not found, installing ansible..."
            sudo apt update
            sudo apt install -y ansible
          else
            echo "✅ ansible-playbook already installed"
          fi

          echo "🔍 Checking for kubectl..."
          if ! command -v kubectl > /dev/null; then
            echo "➡ kubectl not found, installing kubectl via snap..."
            sudo snap install kubectl --classic
          else
            echo "✅ kubectl already installed"
          fi


          echo "✅ All prerequisites are now installed!"
        '''
      }
    }

    stage('Checkout') {
      steps {
        git(
          url: 'https://github.com/ZachariasLiodakis/DevOps',
          branch: 'main'
        )
      }
    }

    stage('Deploy to K8s via Ansible') {
      steps {
        script {
          // Δημιουργία προσωρινού αρχείου kubeconfig
          writeFile file: '/tmp/kubeconfig', text: "${env.KUBE_CONFIG_CONTENT}"

          // ασφάλεια δικαιωμάτων
          sh 'chmod 600 /tmp/kubeconfig'

          ansiblePlaybook(
            playbook: 'ansible/playbooks/deploy-k8s.yaml',
            inventory: 'ansible/playbooks/hosts.yaml',
            extras: "-e kubeconfig=/tmp/kubeconfig",
            colorized: true
          )
        }
      }
    }
  }
}
